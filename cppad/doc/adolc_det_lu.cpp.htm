<html><head>
<title>Adolc Speed: Gradient of Determinant Using Lu Factorization</title>
<meta name="description" id="description" content="Adolc Speed: Gradient of Determinant Using Lu Factorization">
<meta name="keywords" id="keywords" content=" adolc speed lu compute_det_lu correct_det_lu speed_det_lu ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_adolc_det_lu.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>speed</option>
<option>speed_adolc</option>
<option>adolc_det_lu.cpp</option>
</select>
</td>
<td><a href="adolc_det_minor.cpp.htm" target="_top">Prev</a>
</td><td><a href="adolc_poly.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>Appendix-&gt;</option>
<option>Faq</option>
<option>speed</option>
<option>Theory</option>
<option>glossary</option>
<option>Bib</option>
<option>Bugs</option>
<option>WishList</option>
<option>whats_new</option>
<option>include_deprecated</option>
<option>License</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>speed-&gt;</option>
<option>speed_utility</option>
<option>speed_adolc</option>
<option>speed_cppad</option>
<option>speed_fadbad</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>speed_adolc-&gt;</option>
<option>adolc_det_minor.cpp</option>
<option>adolc_det_lu.cpp</option>
<option>adolc_poly.cpp</option>
</select>
</td>
<td>adolc_det_lu.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Operation Sequence</option>
<option>compute_det_lu</option>
<option>correct_det_lu</option>
<option>speed_det_lu</option>
</select>
</td>
</tr></table><br>



<center><b><big><big>Adolc Speed: Gradient of Determinant Using Lu Factorization</big></big></b></center>
<br>
<b><big><a name="Operation Sequence" id="Operation Sequence">Operation Sequence</a></big></b>
<br>
Note that the Lu factorization
<a href="glossary.htm#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&nbsp;sequence</span></a>

depends on the matrix being factored.
Hence we use a different tape recording for each matrix.

<br>
<br>
<b><big><a name="compute_det_lu" id="compute_det_lu">compute_det_lu</a></big></b>

<br>
Routine that computes the gradient of determinant using Adolc:
<code><font color='blue'><pre style='display:inline'> 
# include &lt;cppad/speed/det_by_lu.hpp&gt;
# include &lt;cppad/speed/det_grad_33.hpp&gt;
# include &lt;cppad/speed/uniform_01.hpp&gt;

# include &lt;adolc/adouble.h&gt;
# include &lt;adolc/interfaces.h&gt;

void compute_det_lu(
	size_t                     size     , 
	size_t                     repeat   , 
	double*                    matrix   ,
	double*                    gradient )
{
	// -----------------------------------------------------
	// setup
	int tag  = 0;         // tape identifier
	int keep = 1;         // keep forward mode results in buffer
	int m    = 1;         // number of dependent variables
	int n    = size*size; // number of independent variables
	double f;             // function value
	int i;                // temporary index

	// object for computing determinant
	typedef adouble    ADScalar;
	typedef ADScalar*  ADVector;
	CppAD::det_by_lu&lt;ADScalar&gt; Det(size);

	// AD value of determinant
	ADScalar   detA;

	// AD version of matrix
	ADVector   A = new ADScalar[n];
	
	// vectors of reverse mode weights 
	double *u = new double [m];
	u[0] = 1.;
	// ------------------------------------------------------
	while(repeat--)
	{	// get the next matrix
		CppAD::uniform_01(n, matrix);

		// declare independent variables
		trace_on(tag, keep);
		for(i = 0; i &lt; n; i++)
			A[i] &lt;&lt;= matrix[i];

		// AD computation of the determinant
		detA = Det(A);

		// create function object f : A -&gt; detA
		detA &gt;&gt;= f;
		trace_off();

		// evaluate and return gradient using reverse mode
		fos_reverse(tag, m, n, u, gradient);
	}
	// ------------------------------------------------------
	// tear down
	delete [] u;
	delete [] A;

	return;
}
</pre></font></code>


<br>
<br>
<b><big><a name="correct_det_lu" id="correct_det_lu">correct_det_lu</a></big></b>

<br>
Routine that tests the correctness of the result computed by compute_det_lu:
<code><font color='blue'><pre style='display:inline'> 
# include &lt;cppad/speed/det_grad_33.hpp&gt;

bool correct_det_lu(void)
{	size_t size   = 3;
	size_t repeat = 1;

	double *matrix   = new double[size * size];
	double *gradient = new double[size * size];

	compute_det_lu(size, repeat, matrix, gradient);

	bool ok = CppAD::det_grad_33(matrix, gradient);

	delete [] gradient;
	delete [] matrix;
	return ok;
}
</pre></font></code>


<br>
<br>
<b><big><a name="speed_det_lu" id="speed_det_lu">speed_det_lu</a></big></b>

<br>
Routine that links compute_det_lu to <a href="speed_test.htm" target="_top"><span style='white-space: nowrap'>speed_test</span></a>
:

<code><font color='blue'><pre style='display:inline'> 
void speed_det_lu(size_t size, size_t repeat)
{	double *matrix   = new double[size * size];
	double *gradient = new double[size * size];

	compute_det_lu(size, repeat, matrix, gradient);
	
	delete [] gradient;
	delete [] matrix;
	return;
}
</pre></font></code>


<hr>Input File: speed/adolc/det_lu.cpp

</body>
</html>
