<html><head>
<title>BenderQuad: Example and Test</title>
<meta name="description" id="description" content="BenderQuad: Example and Test">
<meta name="keywords" id="keywords" content=" Benderquad example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_benderquad.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>library</option>
<option>BenderQuad</option>
<option>BenderQuad.cpp</option>
</select>
</td>
<td><a href="benderquad.htm" target="_top">Prev</a>
</td><td><a href="luratio.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>library-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>BenderQuad</option>
<option>LuRatio</option>
<option>CppAD_vector</option>
<option>TrackNewDel</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>BenderQuad-&gt;</option>
<option>BenderQuad.cpp</option>
</select>
</td>
<td>BenderQuad.cpp</td>
<td>Headings</td>
</tr></table><br>



<center><b><big><big>BenderQuad: Example and Test</big></big></b></center>
Define 
<code>
<span style='white-space: nowrap'>&nbsp;F&nbsp;:&nbsp;\R&nbsp;\times&nbsp;\R&nbsp;\rightarrow&nbsp;\R</span></code>
 by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
F(x,&nbsp;y)&nbsp;<br>
=&nbsp;<br>
\frac{1}{2}&nbsp;\sum_{i=1}^N&nbsp;[&nbsp;y&nbsp;*&nbsp;\sin&nbsp;(&nbsp;x&nbsp;*&nbsp;t_i&nbsp;)&nbsp;-&nbsp;z_i&nbsp;]^2<br>
\]&nbsp;</span></code>
 
where <code>
<span style='white-space: nowrap'>&nbsp;z&nbsp;\in&nbsp;\R^N</span></code>
 is a fixed vector.
It follows that
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\begin{array}{rcl}<br>
\partial_y&nbsp;F(x,&nbsp;y)&nbsp;<br>
&amp;&nbsp;=&nbsp;&amp;&nbsp;<br>
\sum_{i=1}^N&nbsp;[&nbsp;y&nbsp;*&nbsp;\sin&nbsp;(&nbsp;x&nbsp;*&nbsp;t_i&nbsp;)&nbsp;-&nbsp;z_i&nbsp;]&nbsp;\sin(&nbsp;x&nbsp;*&nbsp;t_i&nbsp;)<br>
\\<br>
\partial_y&nbsp;\partial_y&nbsp;F(x,&nbsp;y)<br>
&amp;&nbsp;=&nbsp;&amp;&nbsp;<br>
\sum_{i=1}^N&nbsp;\sin&nbsp;(&nbsp;x&nbsp;t_i&nbsp;)^2<br>
\end{array}<br>
\]&nbsp;</span></code>

Furthermore if we define <code>
<span style='white-space: nowrap'>&nbsp;Y(x)</span></code>
 
as the argmin of <code>
<span style='white-space: nowrap'>&nbsp;F(x,&nbsp;y)</span></code>
 with respect to <code>
<span style='white-space: nowrap'>&nbsp;y</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\begin{array}{rcl}<br>
Y(x)&nbsp;<br>
&amp;&nbsp;=&nbsp;&amp;<br>
y&nbsp;-&nbsp;[&nbsp;\partial_y&nbsp;\partial_y&nbsp;F(x,&nbsp;y)&nbsp;]^{-1}&nbsp;\partial_y&nbsp;F[x,&nbsp;&nbsp;y]&nbsp;<br>
\\<br>
&amp;&nbsp;=&nbsp;&amp;<br>
\left.&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\sum_{i=1}^N&nbsp;z_i&nbsp;\sin&nbsp;(&nbsp;x&nbsp;t_i&nbsp;)&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\right/&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\sum_{i=1}^N&nbsp;z_i&nbsp;\sin&nbsp;(&nbsp;x&nbsp;*&nbsp;t_i&nbsp;)^2&nbsp;<br>
\end{array}<br>
\]&nbsp;</span></code>




<code><font color="blue">
<pre style='display:inline'> 

# include &lt;cppad/cppad.hpp&gt;

namespace {
	template &lt;class Type&gt;   // Type can be either double or AD&lt;double&gt;
	class Fun {
	typedef CPPAD_TEST_VECTOR&lt;double&gt; BAvector;
	typedef CPPAD_TEST_VECTOR&lt;Type&gt;   ADvector;
	private:
		BAvector t; // measurement times
		BAvector z; // measurement values
	public:
		// constructor
		Fun(const BAvector &amp;t_, const BAvector &amp;z_)
		{ }
		// Fun.f(x, y) = F(x, y)
		ADvector f(const ADvector &amp;x, const ADvector &amp;y)
		{	size_t i;
			size_t N = z.size();

			ADvector f(1);
			f[0] = Type(0);

			Type residual;
			for(i = 0; i &lt; N; i++)
			{	residual = y[0] * sin( x[0] * t[i] ) - z[i];
				f[0]    += residual * residual;
			}
			return f;
		}
		// Fun.h(x, y) = H(x, y) = F_y (x, y)
		ADvector h(const ADvector &amp;x, const BAvector &amp;y)
		{	size_t i;
			size_t N = z.size();

			ADvector fy(1);
			fy[0] = Type(0);

			Type residual;
			for(i = 0; i &lt; N; i++)
			{	residual = y[0] * sin( x[0] * t[i] ) - z[i];
				fy[0]   += residual * sin( x[0] * t[i] );
			}
			return fy;
		}
		// Fun.dy(x, y, h) = - H_y (x,y)^{-1} * h 
		//                 = - F_yy (x, y)^{-1} * h
		ADvector dy(
			const BAvector &amp;x , 
			const BAvector &amp;y , 
			const ADvector &amp;h )
		{	size_t i;
			size_t N = z.size();

			ADvector dy(1);
			Type fyy = Type(0);

			for(i = 0; i &lt; N; i++)
			{	fyy += sin( x[0] * t[i] ) * sin( x[0] * t[i] );
			}
			dy[0] = - h[0] / fyy;

			return dy;
		}
		// Fun.Y(x) = Y(x)  (only used for testing results)
		BAvector Y(const BAvector &amp;x )
		{	size_t i;
			size_t N = z.size();

			BAvector y(1);
			double num = 0.;
			double den = 0.;

			for(i = 0; i &lt; N; i++)
			{	num += z[i] * sin( x[0] * t[i] );
				den += sin( x[0] * t[i] ) * sin( x[0] * t[i] );
			}
			y[0] = num / den;

			return y;
		}
	};
}

bool BenderQuad(void)
{	bool ok = true;
	using CppAD::AD;
	using CppAD::NearEqual;

	// temporary indices
	size_t i;

	// x space vector
	size_t n = 1;
	CPPAD_TEST_VECTOR&lt;double&gt; x(n);
	x[0] = 2. * 3.141592653;

	// y space vector
	size_t m = 1;
	CPPAD_TEST_VECTOR&lt;double&gt; y(m);
	y[0] = 1.;

	// t and z vectors
	size_t N = 10;
	CPPAD_TEST_VECTOR&lt;double&gt; t(N);
	CPPAD_TEST_VECTOR&lt;double&gt; z(N);
	for(i = 0; i &lt; N; i++)
	{	t[i] = double(i) / double(N);       // time or measurement
		z[i] = y[0] * sin( x[0] * t[i] );   // data without noise
	}

	// construct the function object with Type = AD&lt;double&gt;
	Fun&lt; AD&lt;double&gt; &gt; fun(z, t);

	// construct the function object with Type = double
	Fun&lt;double&gt;       fun_test(z, t);       

	// evaluate the G(x), G'(x) and G''(x)
	CPPAD_TEST_VECTOR&lt;double&gt; g(1), gx(n), gxx(n * n);
	BenderQuad(x, y, fun, g, gx, gxx);

	// Evaluate G(x) at nearby points
	double              step(1e-5);
	CPPAD_TEST_VECTOR&lt;double&gt; g0 = fun_test.f(x, fun_test.Y(x) );
	x[0] = x[0] + 1. * step;
	CPPAD_TEST_VECTOR&lt;double&gt; gp = fun_test.f(x, fun_test.Y(x) );
	x[0] = x[0] - 2. * step;
	CPPAD_TEST_VECTOR&lt;double&gt; gm = fun_test.f(x, fun_test.Y(x) );

	// check function value
	double check = g0[0];
	ok          &amp;= NearEqual(check, g[0], 1e-10, 1e-10);

	// check derivative value
	check        = (gp[0] - gm[0]) / (2. * step);
	ok          &amp;= NearEqual(check, gx[0], 1e-10, 1e-10);

	check        = (gp[0] - 2. * g0[0] + gm[0]) / (step * step);
	ok          &amp;= NearEqual(check, gxx[0], 1e-10, 1e-10);

	return ok;
}

</pre>

</font></code>


<hr>Input File: example/bender_quad.cpp

</body>
</html>
