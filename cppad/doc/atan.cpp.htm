<html><head>
<title>The AD atan Function: Example and Test</title>
<meta name="description" id="description" content="The AD atan Function: Example and Test">
<meta name="keywords" id="keywords" content=" atan Ad example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atan.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>StdMathUnary</option>
<option>Atan.cpp</option>
</select>
</td>
<td><a href="asin.cpp.htm" target="_top">Prev</a>
</td><td><a href="cos.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>AD-&gt;</option>
<option>Default</option>
<option>ad_copy</option>
<option>Convert</option>
<option>ADValued</option>
<option>BoolValued</option>
<option>VecAD</option>
<option>base_require</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>ADValued-&gt;</option>
<option>Arithmetic</option>
<option>StdMathUnary</option>
<option>MathOther</option>
<option>CondExp</option>
<option>Discrete</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>StdMathUnary-&gt;</option>
<option>Acos.cpp</option>
<option>Asin.cpp</option>
<option>Atan.cpp</option>
<option>Cos.cpp</option>
<option>Cosh.cpp</option>
<option>Exp.cpp</option>
<option>Log.cpp</option>
<option>Log10.cpp</option>
<option>Sin.cpp</option>
<option>Sinh.cpp</option>
<option>Sqrt.cpp</option>
<option>Tan.cpp</option>
</select>
</td>
<td>Atan.cpp</td>
<td>Headings</td>
</tr></table><br>



<center><b><big><big>The AD atan Function: Example and Test</big></big></b></center>
<code><font color="blue"><pre style='display:inline'> 

# include &lt;cppad/cppad.hpp&gt;

bool Atan(void)
{	bool ok = true;

	using CppAD::AD;
	using CppAD::NearEqual;

	// domain space vector
	size_t n  = 1;
	double x0 = 0.5;
	CPPAD_TEST_VECTOR&lt; AD&lt;double&gt; &gt; x(n);
	x[0]      = x0;

	// declare independent variables and start tape recording
	CppAD::Independent(x);

	// a temporary value
	AD&lt;double&gt; tan_of_x0 = CppAD::tan(x[0]);

	// range space vector 
	size_t m = 1;
	CPPAD_TEST_VECTOR&lt; AD&lt;double&gt; &gt; y(m);
	y[0] = CppAD::atan(tan_of_x0);

	// create f: x -&gt; y and stop tape recording
	CppAD::ADFun&lt;double&gt; f(x, y); 

	// check value 
	ok &amp;= NearEqual(y[0] , x0,  1e-10 , 1e-10);

	// forward computation of first partial w.r.t. x[0]
	CPPAD_TEST_VECTOR&lt;double&gt; dx(n);
	CPPAD_TEST_VECTOR&lt;double&gt; dy(m);
	dx[0] = 1.;
	dy    = f.Forward(1, dx);
	ok   &amp;= NearEqual(dy[0], 1., 1e-10, 1e-10);

	// reverse computation of derivative of y[0]
	CPPAD_TEST_VECTOR&lt;double&gt;  w(m);
	CPPAD_TEST_VECTOR&lt;double&gt; dw(n);
	w[0]  = 1.;
	dw    = f.Reverse(1, w);
	ok   &amp;= NearEqual(dw[0], 1., 1e-10, 1e-10);

	// use a VecAD&lt;Base&gt;::reference object with atan
	CppAD::VecAD&lt;double&gt; v(1);
	AD&lt;double&gt; zero(0);
	v[zero] = tan_of_x0;
	AD&lt;double&gt; result = CppAD::atan(v[zero]);
	ok     &amp;= NearEqual(result, x0, 1e-10, 1e-10);

	return ok;
}

</pre>

</font></code>


<hr>Input File: example/atan.cpp

</body>
</html>
