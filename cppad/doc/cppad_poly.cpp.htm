<html><head>
<title>CppAD Speed: Second Derivative of a Polynomial</title>
<meta name="description" id="description" content="CppAD Speed: Second Derivative of a Polynomial">
<meta name="keywords" id="keywords" content=" cppad speed polynomial compute_poly correct_poly speed_poly ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_cppad_poly.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>speed</option>
<option>speed_cppad</option>
<option>cppad_poly.cpp</option>
</select>
</td>
<td><a href="cppad_det_lu.cpp.htm" target="_top">Prev</a>
</td><td><a href="speed_fadbad.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>Appendix-&gt;</option>
<option>Faq</option>
<option>speed</option>
<option>Theory</option>
<option>glossary</option>
<option>Bib</option>
<option>Bugs</option>
<option>WishList</option>
<option>whats_new</option>
<option>include_deprecated</option>
<option>License</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>speed-&gt;</option>
<option>speed_utility</option>
<option>speed_adolc</option>
<option>speed_cppad</option>
<option>speed_fadbad</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>speed_cppad-&gt;</option>
<option>cppad_det_minor.cpp</option>
<option>cppad_det_lu.cpp</option>
<option>cppad_poly.cpp</option>
</select>
</td>
<td>cppad_poly.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Operation Sequence</option>
<option>compute_poly</option>
<option>correct_poly</option>
<option>speed_poly</option>
</select>
</td>
</tr></table><br>



<center><b><big><big>CppAD Speed: Second Derivative of a Polynomial</big></big></b></center>
<br>
<b><big><a name="Operation Sequence" id="Operation Sequence">Operation Sequence</a></big></b>
<br>
Note that the polynomial evaluation
<a href="glossary.htm#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&nbsp;sequence</span></a>

does not depend on the argument to the polynomial.
Hence we use the same <a href="adfun.htm" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object for all the argument values.

<br>
<br>
<b><big><a name="compute_poly" id="compute_poly">compute_poly</a></big></b>

<br>
Routine that computes the second derivative of a polynomial using CppAD:
<code><font color='blue'><pre style='display:inline'> 
# include &lt;cppad/cppad.hpp&gt;
# include &lt;cppad/speed/uniform_01.hpp&gt;

void compute_poly(
	size_t                     size     , 
	size_t                     repeat   , 
	CPPAD_TEST_VECTOR&lt;double&gt;       &amp;a        ,  // coefficients of polynomial
	CPPAD_TEST_VECTOR&lt;double&gt;       &amp;z        ,  // polynomial argument value
	CPPAD_TEST_VECTOR&lt;double&gt;       &amp;ddp      )  // second derivative w.r.t z  
{
	// -----------------------------------------------------
	// setup
	typedef CppAD::AD&lt;double&gt;     ADScalar; 
	typedef CPPAD_TEST_VECTOR&lt;ADScalar&gt; ADVector; 

	size_t i;      // temporary index
	size_t m = 1;  // number of dependent variables
	size_t n = 1;  // number of independent variables
	ADVector Z(n); // AD domain space vector
	ADVector P(m); // AD range space vector

	// choose the polynomial coefficients
	CppAD::uniform_01(size, a);

	// AD copy of the polynomial coefficients
	ADVector A(size);
	for(i = 0; i &lt; size; i++)
		A[i] = a[i];

	// forward mode first and second differentials
	CPPAD_TEST_VECTOR&lt;double&gt; dz(1), ddz(1);
	dz[0]  = 1.;
	ddz[0] = 0.;

	// choose an argument value
	CppAD::uniform_01(1, z);
	Z[0] = z[0];

	// declare independent variables
	Independent(Z);

	// AD computation of the function value 
	P[0] = CppAD::Poly(0, A, Z[0]);

	// create function object f : A -&gt; detA
	CppAD::ADFun&lt;double&gt; f(Z, P);

	// ------------------------------------------------------
	while(repeat--)
	{	// get the next argument value
		CppAD::uniform_01(1, z);

		// evaluate the polynomial at the new argument value
		ddp = f.Forward(0, z);

		// evaluate first order Taylor coefficient
		ddp = f.Forward(1, dz);

		// second derivative is twice second order Taylor coefficient
		ddp     = f.Forward(2, ddz);
		ddp[0] *= 2.;

	}
	return;
}
</pre></font></code>


<br>
<br>
<b><big><a name="correct_poly" id="correct_poly">correct_poly</a></big></b>

<br>
Routine that tests the correctness of the result computed by compute_poly:
<code><font color='blue'><pre style='display:inline'> 
bool correct_poly(void)
{	size_t size   = 10;
	size_t repeat = 1;
	CPPAD_TEST_VECTOR&lt;double&gt; a(size), z(1), ddp(1);

	compute_poly(size, repeat, a, z, ddp);

	// use direct evaluation by Poly to check AD evaluation
	double check = CppAD::Poly(2, a, z[0]);
	bool ok = CppAD::NearEqual(check, ddp[0], 1e-10, 1e-10);
	
	return ok;
}
</pre></font></code>


<br>
<br>
<b><big><a name="speed_poly" id="speed_poly">speed_poly</a></big></b>

<br>
Routine that links compute_poly to <a href="speed_test.htm" target="_top"><span style='white-space: nowrap'>speed_test</span></a>
:

<code><font color='blue'><pre style='display:inline'> 
void speed_poly(size_t size, size_t repeat)
{
	CPPAD_TEST_VECTOR&lt;double&gt; a(size), z(1), ddp(1);

	compute_poly(size, repeat, a, z, ddp);
	
	return;
}
</pre></font></code>


<hr>Input File: speed/cppad/poly.cpp

</body>
</html>
