<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>CppAD Speed: Gradient of Determinant Using Lu Factorization</title>
<meta name="description" id="description" content="CppAD Speed: Gradient of Determinant Using Lu Factorization"/>
<meta name="keywords" id="keywords" content=" cppad speed lu compute_det_lu correct_det_lu speed_det_lu "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_cppad_det_lu.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>speed</option>
<option>speed_cppad</option>
<option>cppad_det_lu.cpp</option>
</select>
</td>
<td><a href="cppad_det_minor.cpp.xml" target="_top">Prev</a>
</td><td><a href="cppad_poly.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>Appendix-&gt;</option>
<option>Faq</option>
<option>speed</option>
<option>Theory</option>
<option>glossary</option>
<option>Bib</option>
<option>Bugs</option>
<option>WishList</option>
<option>whats_new</option>
<option>include_deprecated</option>
<option>License</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>speed-&gt;</option>
<option>speed_utility</option>
<option>speed_adolc</option>
<option>speed_cppad</option>
<option>speed_fadbad</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>speed_cppad-&gt;</option>
<option>cppad_det_minor.cpp</option>
<option>cppad_det_lu.cpp</option>
<option>cppad_poly.cpp</option>
</select>
</td>
<td>cppad_det_lu.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Operation Sequence</option>
<option>compute_det_lu</option>
<option>correct_det_lu</option>
<option>speed_det_lu</option>
</select>
</td>
</tr></table><br/>



<center><b><big><big>CppAD Speed: Gradient of Determinant Using Lu Factorization</big></big></b></center>
<br/>
<b><big><a name="Operation Sequence" id="Operation Sequence">Operation Sequence</a></big></b>
<br/>
Note that the Lu factorization
<a href="glossary.xml#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&#xA0;sequence</span></a>

depends on the matrix being factored.
Hence we use a different <a href="adfun.xml" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object for each matrix.

<br/>
<br/>
<b><big><a name="compute_det_lu" id="compute_det_lu">compute_det_lu</a></big></b>

<br/>
Routine that computes the gradient of determinant using CppAD:
<code><font color='blue'><pre style='display:inline'> 
# include &lt;cppad/cppad.hpp&gt;
# include &lt;cppad/speed/det_by_lu.hpp&gt;
# include &lt;cppad/speed/uniform_01.hpp&gt;

void compute_det_lu(
	size_t                           size     , 
	size_t                           repeat   , 
	CPPAD_TEST_VECTOR&lt;double&gt;       &amp;matrix   ,
	CPPAD_TEST_VECTOR&lt;double&gt;       &amp;gradient )
{
	// -----------------------------------------------------
	// setup
	typedef CppAD::AD&lt;double&gt;           ADScalar; 
	typedef CPPAD_TEST_VECTOR&lt;ADScalar&gt; ADVector; 
	CppAD::det_by_lu&lt;ADScalar&gt;         Det(size);

	size_t i;               // temporary index
	size_t m = 1;           // number of dependent variables
	size_t n = size * size; // number of independent variables
	ADVector   A(n);        // AD domain space vector
	ADVector   detA(m);     // AD range space vector
	
	// vectors of reverse mode weights 
	CPPAD_TEST_VECTOR&lt;double&gt; w(1);
	w[0] = 1.;

	// ------------------------------------------------------

	while(repeat--)
	{	// get the next matrix
		CppAD::uniform_01(n, matrix);
		for( i = 0; i &lt; n; i++)
			A[i] = matrix[i];

		// declare independent variables
		Independent(A);

		// AD computation of the determinant
		detA[0] = Det(A);

		// create function object f : A -&gt; detA
		CppAD::ADFun&lt;double&gt; f(A, detA);

		// evaluate and return gradient using reverse mode
		gradient = f.Reverse(1, w);
	}
	return;
}
</pre></font></code>


<br/>
<br/>
<b><big><a name="correct_det_lu" id="correct_det_lu">correct_det_lu</a></big></b>

<br/>
Routine that tests the correctness of the result computed by compute_det_lu:
<code><font color='blue'><pre style='display:inline'> 
# include &lt;cppad/speed/det_grad_33.hpp&gt;

bool correct_det_lu(void)
{	size_t size   = 3;
	size_t repeat = 1;
	CPPAD_TEST_VECTOR&lt;double&gt; matrix(size * size);
	CPPAD_TEST_VECTOR&lt;double&gt; gradient(size * size);

	compute_det_lu(size, repeat, matrix, gradient);

	bool ok = CppAD::det_grad_33(matrix, gradient);
	return ok;
}
</pre></font></code>


<br/>
<br/>
<b><big><a name="speed_det_lu" id="speed_det_lu">speed_det_lu</a></big></b>

<br/>
Routine that links compute_det_lu to <a href="speed_test.xml" target="_top"><span style='white-space: nowrap'>speed_test</span></a>
:
<code><font color='blue'><pre style='display:inline'> 
void speed_det_lu(size_t size, size_t repeat)
{	CPPAD_TEST_VECTOR&lt;double&gt; matrix(size * size);
	CPPAD_TEST_VECTOR&lt;double&gt; gradient(size * size);

	compute_det_lu(size, repeat, matrix, gradient);
	
	return;
}
</pre></font></code>


<hr/>Input File: speed/cppad/det_lu.cpp

</body>
</html>
